#!/usr/bin/env python
###################################
# mov2numpy
#
# convert .mov files to numpy file
###################################
from __future__ import division
import os
import sys
import numpy as np

from isanaht.io import loadmov
from isanaht.user_interaction import verify_im

import argparse


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='Convert a .mov file to a .npy file for easier handling in python',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('infile', type=str, help='input file name')
    parser.add_argument('outfile', type=str, help='output file name')
    # parser.add_argument('--head', type=str, help='xml header file describing video properties')
    parser.add_argument('--cropx', type=int, nargs=2, help='x-crop bounds')
    parser.add_argument('--cropy', type=int, nargs=2, help='y-crop bounds')


    args = parser.parse_args()
    infile = args.infile
    outfile = args.outfile
    # header = args.head
    xbounds = args.cropx
    ybounds = args.cropy

    crop = False

    if xbounds is not None:
        crop = True
    else:
        xbounds = [None, None]


    if ybounds is not None:
        crop = True
    else:
        ybounds = [None, None]


    _sl = [slice(None, None),
           slice(*ybounds),
           slice(*xbounds),
           Ellipsis]


    assert os.path.exists(infile), "please choose a real input file"
    fr = loadmov(infile)

    nf = fr.shape[0]

    if crop:
        if not verify_im(fr[_sl][nf//2], "Confirm Crop (y/n): ", "y"):
            print "\nUser Cancelled\n"
            sys.exit(1)

    np.save(outfile, fr[_sl])

    print "Saved converted output:\t%s\t(%d frames)\n" % (outfile, fr.shape[0])